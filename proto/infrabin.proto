syntax = "proto3";

package infrabin;

import "google/protobuf/struct.proto";
import "google/api/annotations.proto";

option go_package = "github.com/maruina/go-infrabin/pkg/infrabin;infrabin";


// The echo infrabin service replies with the message it received.
service Infrabin {

    rpc Delay(DelayRequest) returns (Response) {
        option (google.api.http) = {
            get: "/delay/{duration}"
        };
    }
    rpc Liveness(Empty) returns (Response) {
        option (google.api.http) = {
            get: "/liveness"
        };
    }
    rpc Env(EnvRequest) returns (Response) {
        option (google.api.http) = {
            get: "/env/{env_var}"
        };
    }
    rpc Headers(HeadersRequest) returns (Response) {
        option (google.api.http) = {
            get: "/headers"
        };
    }
    rpc Proxy(ProxyRequest) returns (google.protobuf.Struct) {
        option (google.api.http) = {
            post: "/proxy"
            body: "*"
        };
    }
    rpc AWS(AWSRequest) returns (google.protobuf.Struct) {
        option (google.api.http) = {
            get: "/aws/{path=**}"
        };
    }

    rpc Root(Empty) returns (Response) {
        option (google.api.http) = {
            get: "//"
        };
    }
}


// Empty is the null value for parameters.
message Empty {}

message Response {
	string              hostname     = 1;
	KubeResponse        kubernetes   = 2;
	string              liveness     = 3;
	int32               delay        = 4;
	string              error        = 5;
	map<string, string> headers      = 6;
	map<string, string> env          = 7;
}

message KubeResponse {
  string  pod_name = 1;
  string  namespace = 2;
  string  pod_ip = 3;
  string  node_name = 4;
}

message DelayRequest {
    int32 duration = 1;
}

message EnvRequest {
    string env_var = 1;
}

message HeadersRequest {
    map<string, string> headers = 1;
}

message ProxyRequest {
    string method = 1;
    string url = 2;
    google.protobuf.Struct body = 3;
    map<string, string> headers = 4;
}

message AWSRequest {
    string path = 1;
}

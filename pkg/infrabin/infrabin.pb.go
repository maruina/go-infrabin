// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: infrabin.proto

package infrabin

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Empty is the null value for parameters.
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infrabin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_infrabin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_infrabin_proto_rawDescGZIP(), []int{0}
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname   string            `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Kubernetes *KubeResponse     `protobuf:"bytes,2,opt,name=kubernetes,proto3" json:"kubernetes,omitempty"`
	Liveness   string            `protobuf:"bytes,3,opt,name=liveness,proto3" json:"liveness,omitempty"`
	Delay      int32             `protobuf:"varint,4,opt,name=delay,proto3" json:"delay,omitempty"`
	Error      string            `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	Headers    map[string]string `protobuf:"bytes,6,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Env        map[string]string `protobuf:"bytes,7,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infrabin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_infrabin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_infrabin_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Response) GetKubernetes() *KubeResponse {
	if x != nil {
		return x.Kubernetes
	}
	return nil
}

func (x *Response) GetLiveness() string {
	if x != nil {
		return x.Liveness
	}
	return ""
}

func (x *Response) GetDelay() int32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *Response) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Response) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Response) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

type KubeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodName   string `protobuf:"bytes,1,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PodIp     string `protobuf:"bytes,3,opt,name=pod_ip,json=podIp,proto3" json:"pod_ip,omitempty"`
	NodeName  string `protobuf:"bytes,4,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
}

func (x *KubeResponse) Reset() {
	*x = KubeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infrabin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeResponse) ProtoMessage() {}

func (x *KubeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infrabin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeResponse.ProtoReflect.Descriptor instead.
func (*KubeResponse) Descriptor() ([]byte, []int) {
	return file_infrabin_proto_rawDescGZIP(), []int{2}
}

func (x *KubeResponse) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *KubeResponse) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *KubeResponse) GetPodIp() string {
	if x != nil {
		return x.PodIp
	}
	return ""
}

func (x *KubeResponse) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

type DelayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration int32 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *DelayRequest) Reset() {
	*x = DelayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infrabin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelayRequest) ProtoMessage() {}

func (x *DelayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infrabin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelayRequest.ProtoReflect.Descriptor instead.
func (*DelayRequest) Descriptor() ([]byte, []int) {
	return file_infrabin_proto_rawDescGZIP(), []int{3}
}

func (x *DelayRequest) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type EnvRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvVar string `protobuf:"bytes,1,opt,name=env_var,json=envVar,proto3" json:"env_var,omitempty"`
}

func (x *EnvRequest) Reset() {
	*x = EnvRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infrabin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvRequest) ProtoMessage() {}

func (x *EnvRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infrabin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvRequest.ProtoReflect.Descriptor instead.
func (*EnvRequest) Descriptor() ([]byte, []int) {
	return file_infrabin_proto_rawDescGZIP(), []int{4}
}

func (x *EnvRequest) GetEnvVar() string {
	if x != nil {
		return x.EnvVar
	}
	return ""
}

type HeadersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers map[string]string `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HeadersRequest) Reset() {
	*x = HeadersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infrabin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadersRequest) ProtoMessage() {}

func (x *HeadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infrabin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadersRequest.ProtoReflect.Descriptor instead.
func (*HeadersRequest) Descriptor() ([]byte, []int) {
	return file_infrabin_proto_rawDescGZIP(), []int{5}
}

func (x *HeadersRequest) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

var File_infrabin_proto protoreflect.FileDescriptor

var file_infrabin_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x69, 0x6e, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x84, 0x03, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0a,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x69, 0x6e, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x69, 0x6e, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7b, 0x0a, 0x0c, 0x4b, 0x75,
	0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f, 0x64, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2a, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x25, 0x0a, 0x0a, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x22, 0x8d, 0x01, 0x0a, 0x0e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x69, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x3a,
	0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x91, 0x02, 0x0a, 0x08, 0x49,
	0x6e, 0x66, 0x72, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x0f, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x05, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x16, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62,
	0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a,
	0x08, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x0f, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x62, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x62, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x31, 0x0a, 0x03, 0x45, 0x6e, 0x76, 0x12, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62,
	0x69, 0x6e, 0x2e, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x18,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x69, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x62, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x36,
	0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x72,
	0x75, 0x69, 0x6e, 0x61, 0x2f, 0x67, 0x6f, 0x2d, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x69, 0x6e,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x69, 0x6e, 0x3b, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x62, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infrabin_proto_rawDescOnce sync.Once
	file_infrabin_proto_rawDescData = file_infrabin_proto_rawDesc
)

func file_infrabin_proto_rawDescGZIP() []byte {
	file_infrabin_proto_rawDescOnce.Do(func() {
		file_infrabin_proto_rawDescData = protoimpl.X.CompressGZIP(file_infrabin_proto_rawDescData)
	})
	return file_infrabin_proto_rawDescData
}

var file_infrabin_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_infrabin_proto_goTypes = []interface{}{
	(*Empty)(nil),          // 0: infrabin.Empty
	(*Response)(nil),       // 1: infrabin.Response
	(*KubeResponse)(nil),   // 2: infrabin.KubeResponse
	(*DelayRequest)(nil),   // 3: infrabin.DelayRequest
	(*EnvRequest)(nil),     // 4: infrabin.EnvRequest
	(*HeadersRequest)(nil), // 5: infrabin.HeadersRequest
	nil,                    // 6: infrabin.Response.HeadersEntry
	nil,                    // 7: infrabin.Response.EnvEntry
	nil,                    // 8: infrabin.HeadersRequest.HeadersEntry
}
var file_infrabin_proto_depIdxs = []int32{
	2, // 0: infrabin.Response.kubernetes:type_name -> infrabin.KubeResponse
	6, // 1: infrabin.Response.headers:type_name -> infrabin.Response.HeadersEntry
	7, // 2: infrabin.Response.env:type_name -> infrabin.Response.EnvEntry
	8, // 3: infrabin.HeadersRequest.headers:type_name -> infrabin.HeadersRequest.HeadersEntry
	0, // 4: infrabin.Infrabin.Root:input_type -> infrabin.Empty
	3, // 5: infrabin.Infrabin.Delay:input_type -> infrabin.DelayRequest
	0, // 6: infrabin.Infrabin.Liveness:input_type -> infrabin.Empty
	4, // 7: infrabin.Infrabin.Env:input_type -> infrabin.EnvRequest
	5, // 8: infrabin.Infrabin.Headers:input_type -> infrabin.HeadersRequest
	1, // 9: infrabin.Infrabin.Root:output_type -> infrabin.Response
	1, // 10: infrabin.Infrabin.Delay:output_type -> infrabin.Response
	1, // 11: infrabin.Infrabin.Liveness:output_type -> infrabin.Response
	1, // 12: infrabin.Infrabin.Env:output_type -> infrabin.Response
	1, // 13: infrabin.Infrabin.Headers:output_type -> infrabin.Response
	9, // [9:14] is the sub-list for method output_type
	4, // [4:9] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_infrabin_proto_init() }
func file_infrabin_proto_init() {
	if File_infrabin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infrabin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infrabin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infrabin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infrabin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infrabin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infrabin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeadersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infrabin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_infrabin_proto_goTypes,
		DependencyIndexes: file_infrabin_proto_depIdxs,
		MessageInfos:      file_infrabin_proto_msgTypes,
	}.Build()
	File_infrabin_proto = out.File
	file_infrabin_proto_rawDesc = nil
	file_infrabin_proto_goTypes = nil
	file_infrabin_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InfrabinClient is the client API for Infrabin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InfrabinClient interface {
	Root(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
	Delay(ctx context.Context, in *DelayRequest, opts ...grpc.CallOption) (*Response, error)
	Liveness(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
	Env(ctx context.Context, in *EnvRequest, opts ...grpc.CallOption) (*Response, error)
	Headers(ctx context.Context, in *HeadersRequest, opts ...grpc.CallOption) (*Response, error)
}

type infrabinClient struct {
	cc grpc.ClientConnInterface
}

func NewInfrabinClient(cc grpc.ClientConnInterface) InfrabinClient {
	return &infrabinClient{cc}
}

func (c *infrabinClient) Root(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/infrabin.Infrabin/Root", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrabinClient) Delay(ctx context.Context, in *DelayRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/infrabin.Infrabin/Delay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrabinClient) Liveness(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/infrabin.Infrabin/Liveness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrabinClient) Env(ctx context.Context, in *EnvRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/infrabin.Infrabin/Env", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrabinClient) Headers(ctx context.Context, in *HeadersRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/infrabin.Infrabin/Headers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfrabinServer is the server API for Infrabin service.
type InfrabinServer interface {
	Root(context.Context, *Empty) (*Response, error)
	Delay(context.Context, *DelayRequest) (*Response, error)
	Liveness(context.Context, *Empty) (*Response, error)
	Env(context.Context, *EnvRequest) (*Response, error)
	Headers(context.Context, *HeadersRequest) (*Response, error)
}

// UnimplementedInfrabinServer can be embedded to have forward compatible implementations.
type UnimplementedInfrabinServer struct {
}

func (*UnimplementedInfrabinServer) Root(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Root not implemented")
}
func (*UnimplementedInfrabinServer) Delay(context.Context, *DelayRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delay not implemented")
}
func (*UnimplementedInfrabinServer) Liveness(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (*UnimplementedInfrabinServer) Env(context.Context, *EnvRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Env not implemented")
}
func (*UnimplementedInfrabinServer) Headers(context.Context, *HeadersRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Headers not implemented")
}

func RegisterInfrabinServer(s *grpc.Server, srv InfrabinServer) {
	s.RegisterService(&_Infrabin_serviceDesc, srv)
}

func _Infrabin_Root_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfrabinServer).Root(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrabin.Infrabin/Root",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfrabinServer).Root(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Infrabin_Delay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfrabinServer).Delay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrabin.Infrabin/Delay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfrabinServer).Delay(ctx, req.(*DelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Infrabin_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfrabinServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrabin.Infrabin/Liveness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfrabinServer).Liveness(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Infrabin_Env_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfrabinServer).Env(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrabin.Infrabin/Env",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfrabinServer).Env(ctx, req.(*EnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Infrabin_Headers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfrabinServer).Headers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrabin.Infrabin/Headers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfrabinServer).Headers(ctx, req.(*HeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Infrabin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "infrabin.Infrabin",
	HandlerType: (*InfrabinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Root",
			Handler:    _Infrabin_Root_Handler,
		},
		{
			MethodName: "Delay",
			Handler:    _Infrabin_Delay_Handler,
		},
		{
			MethodName: "Liveness",
			Handler:    _Infrabin_Liveness_Handler,
		},
		{
			MethodName: "Env",
			Handler:    _Infrabin_Env_Handler,
		},
		{
			MethodName: "Headers",
			Handler:    _Infrabin_Headers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infrabin.proto",
}
